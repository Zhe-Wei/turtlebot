
<launch>
	<arg name="leader_robot_name" value="robot_0"/>
	<arg name="slave_robot_1" value="robot_1"/>
    <arg name="slave_robot_2" value="robot_2"/>

	<arg name="slave1_x" value="-0.8"/> 
	<arg name="slave1_y" value="0.8"/>

    <arg name="slave2_x" value="-0.8"/>
    <arg name="slave2_y" value="-0.8"/>

	<node pkg="tf" type="static_transform_publisher" name="base_to_$(arg slave_robot_1)" args="$(arg slave1_x) $(arg slave1_y) 0 0 0 0   $(arg leader_robot_name)/base_footprint ori_$(arg leader_robot_name)/$(arg slave_robot_1) 100" />
    <node pkg="tf" type="static_transform_publisher" name="base_to_$(arg slave_robot_2)" args="$(arg slave2_x) $(arg slave2_y) 0 0 0 0   $(arg leader_robot_name)/base_footprint ori_$(arg leader_robot_name)/$(arg slave_robot_2) 100" /> 
    
    <!-- publish slave(s) expected location -->
    <node pkg="turtlebot_sim" type="switch_formation.py" name="switch_formation" output="screen">
        <param name="leader_robot_name" value="$(arg leader_robot_name)" />
        <param name="slave_robot_1" value="$(arg slave_robot_1)" />
        <param name="slave_robot_2" value="$(arg slave_robot_2)" />
        <param name="slave1_x" type="double" value="$(arg slave1_x)" />
        <param name="slave1_y" type="double" value="$(arg slave1_y)" />
        <param name="slave2_x" type="double" value="$(arg slave2_x)" />
        <param name="slave2_y" type="double" value="$(arg slave2_y)" />
    </node>

    <param name="max_vel_x" value="0.8" />
    <param name="min_vel_x" value="0.05" />
    <param name="max_vel_theta" value="0.8" />
    <param name="min_vel_theta" value="0.05" />
    
    <arg name="PID" value="true" /> <!-- True(PID) or False(Fuzzy) -->
    <arg name="avoidance" value="false"/>
    <arg name="reset_gazebo" value="true"/>

    <!-- Reset gazebo : equivalent to "rosservice call /gazebo/reset_simulation" -->

    <node pkg="rosservice" type="rosservice" name="global_loc2" args="call --wait /gazebo/reset_simulation" />

    <!-- Move leader robot automatically -->
    <node pkg="turtlebot_sim" type="move_leader.py" name="move_leader">
        <param name="leader_robot_name" value="$(arg leader_robot_name)" />
        <!-- straight or circle -->
        <param name="mode" value="straight" /> 

        <!-- straight -->
        <param name="straight_linear_speed" value="0.2" />

        <!-- circle -->
        <param name="circle_linear_speed" value="0.5" />
        <param name="circle_angular_speed" value="0.1" />
    </node>


    <!-- slave_1 avoidance -->
    <group if="$(arg avoidance)">
        <!-- <group ns="robot_1" > -->
            <node pkg="turtlebot_sim" type="apf.py" name="apf_1" output="screen">
                <param name="follower_robot_name" value="$(arg slave_robot_1)" />
            </node>
            <!-- <node pkg="turtlebot_sim" type="laserTracker.py" name="avoidence_1">
                <param name="winSize" value="2" type="int" />
                <param name="deltaDist" value="0.2" type="double" />
                <param name="robot_name" value="$(arg slave_robot_1)"/>
                <param name="scan_topic" value="scan"/>
            </node>
            <node pkg="turtlebot_sim" type="avoidence.py" name="avoidance_1" output="screen" >
                <param name="avoidance_kv" type="double" value="0.2" /> 		
                <param name="avoidance_kw" type="double" value="0.4" /> 		
                <param name="safe_distence" type="double" value="0.8" /> 		
                <param name="danger_distence" type="double" value="0.6" /> 		
            </node> -->
        <!-- </group> -->
    </group>


    <!-- slave_2 avoidance -->
    <group if="$(arg avoidance)">
        <node pkg="turtlebot_sim" type="apf.py" name="apf_2" output="screen">
            <param name="follower_robot_name" value="$(arg slave_robot_2)" />
        </node>
        <!-- <group ns="robot_2">
            <node pkg="turtlebot_sim" type="laserTracker.py" name="avoidence_2">
                <param name="winSize" value="2" type="int" />
                <param name="deltaDist" value="0.2" type="double" />
                <param name="robot_name" value="$(arg slave_robot_2)"/>
                <param name="scan_topic" value="scan"/>
            </node>
            <node pkg="turtlebot_sim" type="avoidence.py" name="avoidance_2" output="screen" >
                <param name="avoidance_kv" type="double" value="0.2" /> 		
                <param name="avoidance_kw" type="double" value="0.4" /> 		
                <param name="safe_distence" type="double" value="0.6" /> 		
                <param name="danger_distence" type="double" value="0.3" /> 		
            </node>
        </group> -->
    </group>

    <!-- slave_1 PID-->
    <node if="$(arg PID)" pkg="turtlebot_sim" type="leader_follower_formation_pid.py" name="leader_follower1_formation_pid" output="screen" >
        <param name = "tf_prefix" value="$(arg slave_robot_1)"/>
        <param name="leader_robot_name" value="$(arg leader_robot_name)" />
        <param name="follower_robot_name" value="$(arg slave_robot_1)" />
        <param name="k_v" type="double" value="1.5" />
        <param name="k_l" type="double" value="1.0" />
        <param name="k_a" type="double" value="1.0" />
        <param name="slave1_x" type="double" value="$(arg slave1_x)" />
        <param name="slave1_y" type="double" value="$(arg slave1_y)" />
        <param name="base_to_slave" type="string" value="/$(arg slave_robot_1)" /> <!-- slave target的topic名稱 -->
        <param name="base_frame" type="string" value="base_footprint" />
        <remap from="$(arg slave_robot_1)/cmd_vel_ori" to="robot_1/cmd_vel" if="$(eval avoidance==false)"/>
    </node> 


    <!-- slave_2 PID -->
    <node if="$(arg PID)" pkg="turtlebot_sim" type="leader_follower_formation_pid.py" name="leader_follower2_formation_fuzzy" output="screen" >
        <param name = "tf_prefix" value="$(arg slave_robot_2)"/>
        <param name="leader_robot_name" value="$(arg leader_robot_name)" />
        <param name="follower_robot_name" value="$(arg slave_robot_2)" />
        <param name="k_v" type="double" value="1.5" />
        <param name="k_l" type="double" value="1.0" />
        <param name="k_a" type="double" value="1.0" />
        <param name="slave2_x" type="double" value="$(arg slave2_x)" />
        <param name="slave2_y" type="double" value="$(arg slave2_y)" />
        <param name="base_to_slave" type="string" value="/$(arg slave_robot_2)" /> <!-- slave target的topic名稱 -->
        <param name="base_frame" type="string" value="base_footprint" />
        <remap from="$(arg slave_robot_2)/cmd_vel_ori" to="robot_2/cmd_vel" if="$(eval avoidance==false)"/>
    </node>


    <!-- slave_1 fuzzy -->
    <node unless="$(arg PID)" pkg="turtlebot_sim" type="leader_follower_formation_fuzzy.py" name="leader_follower1_formation_fuzzy" output="screen" >
        <param name = "tf_prefix" value="$(arg slave_robot_1)"/>
        <param name="leader_robot_name" value="$(arg leader_robot_name)" />
        <param name="follower_robot_name" value="$(arg slave_robot_1)" />
        <param name="slave1_x" type="double" value="$(arg slave1_x)" />
        <param name="slave1_y" type="double" value="$(arg slave1_y)" />
        <param name="base_to_slave" type="string" value="/$(arg slave_robot_1)" />
        <param name="base_frame" type="string" value="base_footprint" />
        <remap from="$(arg slave_robot_1)/cmd_vel_ori" to="robot_1/cmd_vel" if="$(eval avoidance==false)"/>
    </node> 

    <!-- slave_2 fuzzy -->
    <node unless="$(arg PID)" pkg="turtlebot_sim" type="leader_follower_formation_fuzzy.py" name="leader_follower2_formation_pid" output="screen" >
        <param name = "tf_prefix" value="$(arg slave_robot_2)"/>
        <param name="leader_robot_name" value="$(arg leader_robot_name)" />
        <param name="follower_robot_name" value="$(arg slave_robot_2)" />
        <param name="slave2_x" type="double" value="$(arg slave2_x)" />
        <param name="slave2_y" type="double" value="$(arg slave2_y)" />
        <param name="base_to_slave" type="string" value="/$(arg slave_robot_2)" />
        <param name="base_frame" type="string" value="base_footprint" />
        <remap from="$(arg slave_robot_2)/cmd_vel_ori" to="robot_2/cmd_vel" if="$(eval avoidance==false)"/>
    </node>
</launch>
